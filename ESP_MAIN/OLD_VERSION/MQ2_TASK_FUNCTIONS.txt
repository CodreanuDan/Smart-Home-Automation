/****************************************************************************************************************************/
/*___________________________________________________DESCRIERE_MODUL________________________________________________________*/
/****************************************************************************************************************************/

/*   ---> MODULE NAME: MQ2_TASK_FUNCTIONS.h */

/*   ---> Modulul contine functiile task-ului care se ocupa de citirea datelor de la senzorul MQ2 ()

/*   ---> Modulul contine functiile task-ului: shtReadTask : -> functia principala a task-ului:       -> void T_mqReadTask(void* parameter)
                                                             -> functia de citire de la senzor:       -> float MQRead()
                                                             -> functia de calcul % gaz generic:      -> int MQGetPercentage(float rs_ro_ratio, float *pcurve)
                                                             -> functia de calc. % gaz pt fiecaregaz: -> int MQGetGasPercentage(float rs_ro_ratio, int gas_id)
                                                             -> functia de verificare a citirii:      -> void checkReads(char* taskName)
                                                             */

#ifndef MQ2_TASK_FUNCTIONS
#define MQ2_TASK_FUNCTIONS

/****************************************************************************************************************************/
/*______________________________________________________INCLUDES____________________________________________________________*/
/****************************************************************************************************************************/

/*__LIBRARIES__*/


/*__MODULES__*/
#include "DEFINES.h"                                                                      /*  Includes all the variables used on the program*/



/****************************************************************************************************************************/
/*__________________________________________________SUB_ROUTINES____________________________________________________________*/
/****************************************************************************************************************************/
float MQRead();                                                                           /* Function that reads the data from MQ2 Sensor via digital pin D2 <-- Analog pin A0 from the MQ2 Sensor */
int MQGetGasPercentage(float rs_ro_ratio, int gas_id);                                    /* Function that calculates the gas % for each type of gas */
int MQGetPercentage(float rs_ro_ratio, float *pcurve);                                    /* Function that calculates the generic gas % */
void checkReadsMq(char* taskName);                                                        /* Function that checks if any reads failed and exit early (to try again) */



/****************************************************************************************************************************/
/*_________________________________________________TASK_FUNCTION____________________________________________________________*/
/****************************************************************************************************************************/
void T_mqReadTask(void* parameter)                                                        /* Main function of the mqReadTask */
{
  for(;;)
  {
    char* taskName = "mqReadTask";                                                        /* Task name for dataLog function */

    delay(tc_taskFunc_delay);

    /*________TASK_SUB-ROUTINES___________*/                                              

    // dataLog(taskName, p_mqReadTask);                                                      /* Task info */

    MQRead();                                                                             /* Function that reads the data from MQ2 Sensor via digital pin D2 <-- Analog pin A0 from the MQ2 Sensor */

    checkReadsMq(taskName);                                                               /* Function that checks if any reads failed and exit early (to try again) + dataLog (Task info) */

    /*____________________________________*/

    delay(tc_taskFunc_delay);

    vTaskDelay(pdMS_TO_TICKS(tc_measureTask_delay));                                      /* Delay the task */

  }

}

//__TASK_SUB-ROUTINES__


/****************************************************************************************************************************/
/*___________________________________________________MQ2_READ_FUNCTION______________________________________________________*/
/****************************************************************************************************************************/
/***************************   MQRead *******************************************
Input:   mq_pin - analog   channel
Output:  Rs of the sensor
Remarks: This function use MQResistanceCalculation to caculate the sensor resistenc (Rs).
         The Rs changes as the sensor is in the different consentration of the target
         gas. The sample times and the time interval between samples could be configured
         by changing the definition of the macros.
**********************************************************************************/
float MQRead()                                                                            /* Function that reads the data from MQ2 Sensor via digital pin D2 <-- Analog pin A0 from the MQ2 Sensor */
{
  int i;
  float rs = 0;
 
  for ( i= 0; i < READ_SAMPLE_TIMES; i++)   
  {
    rs += MQResistanceCalculation(analogRead(pin_mq2Pin));
    delay(READ_SAMPLE_INTERVAL);
  }
 
  rs = rs / READ_SAMPLE_TIMES;
 
  return rs;
    
}


/****************************************************************************************************************************/
/*____________________________________________MQ_GET_GAS_PERCENTAGE_FUNCTION________________________________________________*/
/****************************************************************************************************************************/
/***************************   MQGetGasPercentage ********************************
Input:   rs_ro_ratio -   Rs divided by Ro
         gas_id      - target gas type
Output:  ppm of the target gas
Remarks: This function passes different curves to the MQGetPercentage function which 
         calculates the ppm (parts per million) of the target   gas.
**********************************************************************************/
int MQGetGasPercentage(float rs_ro_ratio, int gas_id)                                      /* Function that calculates the gas % for each type of gas */
{
  if ( gas_id   == GAS_LPG ) 
  {
    v_LPGLevel = MQGetPercentage(rs_ro_ratio,LPGCurve);
    return v_LPGLevel;
  } 
  else if ( gas_id == GAS_CO ) 
  {
    v_COLevel = MQGetPercentage(rs_ro_ratio,COCurve);
    return v_COLevel;
  } 
  else if ( gas_id == GAS_SMOKE ) 
  {
    v_smokeValue = MQGetPercentage(rs_ro_ratio,SmokeCurve);
    return v_smokeValue;
  }    
 
  return 0;
}


/****************************************************************************************************************************/
/*________________________________________________MQ_GET_PERCENTAGE_FUNCTION________________________________________________*/
/****************************************************************************************************************************/
/***************************  MQGetPercentage   ********************************
Input:   rs_ro_ratio - Rs divided by Ro
          pcurve      - pointer to the curve of the target gas
Output:  ppm of   the target gas
Remarks: By using the slope and a point of the line. The x(logarithmic   value of ppm) 
         of the line could be derived if y(rs_ro_ratio) is provided.   As it is a 
         logarithmic coordinate, power of 10 is used to convert the   result to non-logarithmic 
         value.
**********************************************************************************/   
int MQGetPercentage(float rs_ro_ratio, float *pcurve)                                     /* Function that calculates the generic gas % */
{
  return (pow(10,(   ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
}

/****************************************************************************************************************************/
/*__________________________________________________MQ_CHECK_READS_FUNCTION_________________________________________________*/
/****************************************************************************************************************************/
void checkReadsMq(char* taskName)                                                         /* Function that checks if any reads failed and exit early (to try again) */
{

  if (isnan(MQRead()))                                                                    /* Check if any reads failed and exit early (to try again) */
    {
      Serial.println("[#] mqReadTask() : Failed to read from MQ2 sensor!");
      return;                                                                             /* Try again ! */
    } 
    else 
    {
      dataLog(taskName, p_mqReadTask);                                                    /* Task info */
      Serial.println(" -> Running OK ");      
    }

}

/****************************************************************************************************************************/

#endif                                                                                    /* MQ2_TASK_FUNCTIONS */


