/****************************************************************************************************************************/
/*__________________________________________________________MQ_2____________________________________________________________*/
/****************************************************************************************************************************/

/************************Sensor Related Macros***********************************/
#define         RL_VALUE                      5                /* define the load resistance on the board, in kilo ohms           */
#define         RO_CLEAN_AIR_FACTOR           9.83             /* RO_CLEAR_AIR_FACTOR=(Sensor resistance in clean air)/RO,        */
                                                               /* which is derived from the chart in datasheet                    */

/**********************Software Related Macros***********************************/
#define         CALIBARAION_SAMPLE_TIMES      50               /* Define how many samples you are going to take in the calibration phase                  */
#define         CALIBRATION_SAMPLE_INTERVAL   500              /* Define the time interal(in milisecond) between each samples in the cablibration phase   */
#define         READ_SAMPLE_INTERVAL          50               /* Define how many samples you are   going to take in normal operation                     */
#define         READ_SAMPLE_TIMES             5                /* Define the time interal(in milisecond) between each samples                             */

/*********************Application Related Macros*********************************/
#define         GAS_LPG                       0
#define         GAS_CO                        1
#define         GAS_SMOKE                     2

/****************************Globals**********************************************/
float            LPGCurve[3]  =  {2.3,0.21,-0.47};              /* Two points are taken from the curve.   
                                                                /* with these two points,   a line is formed which is "approximately equivalent"
                                                                /* to   the original curve. 
                                                                /* data   format:{ x, y, slope}; point1: (lg200, 0.21), point2: (lg10000, -0.59)        */

float            COCurve[3]  =  {2.3,0.72,-0.34};               /* Two points are taken from the curve.   
                                                                /* with these two points,   a line is formed which is "approximately equivalent" 
                                                                /* to   the original curve.
                                                                /* data   format:{ x, y, slope}; point1: (lg200, 0.72), point2: (lg10000,  0.15)        */

float            SmokeCurve[3] ={2.3,0.53,-0.44};               /* Two points are taken from the curve.   
                                                                /* with these two points,   a line is formed which is "approximately equivalent" 
                                                                /* to   the original curve.
                                                                /* data   format:{ x, y, slope}; point1: (lg200, 0.53), point2: (lg10000,  -0.22)       */

float            Ro           = 10;                             /* Ro is initialized to 10 kilo ohms                                                    */

/****************************Results**********************************************/

float v_LPGLevel;                                               /* Percentage resulted for LPG*/
float v_COLevel;                                                /* Percentage resulted for CO*/
float v_smokeValue;                                             /* Percentage resulted for Smoke*/


/****************   MQResistanceCalculation **************************************
Input:   raw_adc - raw value read from adc, which represents the voltage
Output:  the calculated sensor resistance
Remarks: The sensor and the load resistor forms a voltage divider. Given the voltage
         across the load resistor and its resistance, the resistance of the sensor
         could be derived.
**********************************************************************************/   
float MQResistanceCalculation(int raw_adc)
{
  return ( ((float)RL_VALUE*(1023-raw_adc)/raw_adc));
  
}


/*************************** MQCalibration **************************************
Input:   mqPin - analog channel
Output:  Ro of the sensor
Remarks: This function assumes that the sensor is in clean air. It use  
         MQResistanceCalculation to calculates the sensor resistance in clean air 
         and then divides it with RO_CLEAN_AIR_FACTOR. RO_CLEAN_AIR_FACTOR is about 
         10, which differs slightly between different sensors.
**********************************************************************************/   
float MQCalibration(int mq_pin)
{
  int i;
  float calVal = 0;
 
  for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++)                  /* take multiple samples        */
  {
    calVal += MQResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }

  calVal = calVal / CALIBARAION_SAMPLE_TIMES;                     /*  calculate the average value */
 
  calVal = calVal / RO_CLEAN_AIR_FACTOR;                          /*  divided by RO_CLEAN_AIR_FACTOR yields the Ro according to the chart in the datasheet  */
 
  return calVal; 

}